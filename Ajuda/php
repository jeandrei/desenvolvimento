

<!-- comentário automático no visual studio control + k + c -->

**********************************************************TEXTOS***********************************************************************
Para escrever o conteúdo de uma variável dentro do echo sempre coloque entre chaves ex:
echo "Texto desejado {$variavel}";

Tudo em minúsculo: strtolower 
echo strtolower($string); 
Transforma todo o texto em minúsculo ex: meu texto assim

Tudo em maiúsculo: strtoupper 
echo strtoupper($string); 
Transforma todo o texto em maiúsculo ex: MEU TEXTO ASSIM

Primeira letra da frase em maiúsculo: ucfirst
echo ucfirst($string); 
Transforma apenas a primeira letra da frase em maiúscula ex: Meu texto assim

Primeira letra de todas as palavras em maiúsculo: ucwords
echo ucwords($string); 
Transforma a primeira letra de todas as palavras em maiúscula ex: Meu Texto Assim

Tamanho da string: strlen 
echo strlen($string); 
Retorna o tamanho da string ex: 
$string="carro"; 
echo strlen($string); 
o resultado seria: 5

Tirar espaços em branco: Trim:
echo "A" . trim("B C D") ."E"; 
Retira todos os espaços em branco
O resultado seria: ABCDE

Capturar um pedaço de uma string a partir de um parâmetro->palavra: Find
Imaginando que na variável $string temos "My mom has brown eyes like me"
echo strstr($string, "brown"); 
O resultado seria: "brown like me" 
Obs.:Ele captura a string a partir do valor passado. 

Substituir uma palavra por outra: str_replace  
echo str_replace("quick", "super-fast", $string); 
ele vai varrer a variável $string e substituir "quick" por "super-fast"

Repetir uma string um determinado número de vezes: str_repeat
Imaginando que na variável $string temos "Olá Mundo."
echo str_repeat($string, 3);
O resultado seria: Olá Mundo.Olá Mundo.Olá Mundo.

Pegar um pedaço da string a partir da posição de início e fim: substr
Imaginando que na variável $string temos "PHP é uma das 3 linguagens de programação web mais usadas por programadores;"
echo substr($string, 7, 20);
O resultado seria: ma das 3 lin
Obs.: Ele retorna tudo o que está entre os valores passados no caso de 7 e 20 ele vai trazer as letras nas posições 8 e 19

Saber a posição de uma determinada palavra na frase: strpos
Imaginando que na variável $string temos "PHP é uma das 3 linguagens de programação web mais usadas por programadores;"
echo strpos($string, "web");
O resultado seria: 42
Obs.: Ele retorna uma posição antes do início da palavra.

Encontrar um caractere em uma letra e retorna a fraze a partir desta letra: strchr
Imaginando que na variável $string temos "PHP é uma das 3 linguagens de programação web mais usadas por programadores;"
echo strchr($string, "w");
O resultado seria: web mais usadas por programadores


*********************************************************NÚMEROS***********************************************************
$variavel = $variavel + 1;
$variavel += 1;
$variavel++;

$variavel = $variavel - 1;
$variavel -= 1;
$variavel--;

$variavel = $variavel * 2;
$variavel *= 2;

$variavel = $variavel / 2;
$variavel /= 2;

Retorna um valor absoluto: abs
echo abs(0 - 300);
O resultado seria: 300

Retorna um valor elevado a expoente exemplo para fazer 2 elevado a 8 :pow
echo pow(2,8);
O resultado seria: 256

Retorna a raiz quadrada: sqrt
echo sqrt(100); 
O resultado seria: 10

Retorna o módulo{resto} de uma divisão: fmod
echo fmod(20,7);
O resultado seira: 6
Obs.: (20 / 7) = 2 com módulo{resto} de 6

Gera um número aleatóreo: rand
echo rand();
O resultado seria algo como 820888100

Gera um número aleatório entre um intervalo estipulado: rand(minimo,maximo)
echo rand(1,10);
Um possível resultado seria 5
Obs.: aqui ele poderia resultar em qualquer número entre 1 e 10

Arredondar um número real para cima: cell
Imagindnao que na variável $float temos 3,5
echo cell($float);
O resultado seria: 4

Arredondar um número real para baixo: floor
Imagindnao que na variável $float temos 3,5
echo floor($float);
O resultado seria: 3

Retorna se uma variável é do tipo integer: is_int
Imaginando que na variável $valor temos 5
echo is_int($valor);
O resultado seria 1; - Verdadeiro
Obs.: Os valores retornados pela função são: 1 para verdadeiro e nada para falso.
Logo se em $valor tivessemos 5,2
echo is_int($valor);
A função não traria nenhum resultado, logo saberiamos que não se trata de um número do tipo integer

Retorna se uma variável é do tipo float: is_float
Imaginando que na variável $valor temos 5,2
echo is_float($valor);
O resultado seria 1; - Verdadeiro
Obs.: Os valores retornados pela função são: 1 para verdadeiro e nada para falso.
Logo se em $valor tivessemos 5
echo is_float($valor);
A função não traria nenhum resultado, logo saberiamos que não se trata de um número do tipo float

Retorna se uma variável é um valor numérico: is_numeric
Imaginando que na variável $valor temos 5,2
echo is_numeric($valor);
O resultado seria 1; - Verdadeiro
Imaginando que na variável $valor temos 5
echo is_numeric($valor);
O resultado seria 1; - Verdadeiro
Imaginando que na variável $valor temos "carro"
echo is_numeric($valor);
A função não traria nenhum resultado, logo saberiamos que não se trata de um número.

----------------------------->ARRAYS
Declarar um array:
$numbers = array();
Se quisermos podemos definir valores para o array ex: 
$numbers = array(4,8,15,23,42);
echo $numbers[1];
O resultado seria: 8 pois o array começa em 0
Internamente o array é assim: array(0 => 4, 1 => 8, 2 => 15, 3 => 23, 4 => 42);
Para atribuir um valor a um array já criado fariamos:
$numbers[2]=50;
Logo nossor array ficaria:(4,8,50,23,42);
Ainda podemos acrescentar valores para o array mesmo depois de telo criado ex:
$numbers[5]="carro";
Logo nossor array ficaria:(4,8,50,23,42,"carro");
Ainda se não souber qual é o índice do último array você pode simplesmente fazer o seguinte:
$numbers[]="carro";
O php vai sempre acrescentar o valor no final do array criando um novo índice.

Podemos ter dentro de um array valores de tipos diferentes ou mesmo outro array ex:
$valores = array(6,"carro", "laranja", array("x", "y", "z"));
Para mostrar o valor do segundo array fariamos:
echo $valores[3][1];
O resultado seria: y

Uma forma muito legal de visualizar um arrey é com o comando print_r
ex: print_r($valores);
O resultado seria: Array([0]=>6[1]=>carro[2]=>laranja[3]=>Array([0]=>x[1]=>y[2]=>z))

Ainda melhor se fizermos o seguinte:
<pre>
<?php print_r($valores) ?>
<pre>
O resultado seria:

		Array
{
	[0] =>	6
	[1] =>	carro  
	[2] =>	laranja
	[3] =>	Array
		{
			[0] =>	x
			[1] =>	y
			[2] =>	z
		}
}

Para navegar entre os valores do array:
$idades = array(4,8,15,16,23,42);
echo current($idades); --> 4 mostra o valor corrente
echo next($idades); --> 8 avança um valor no array
echo prev($idades); --> 4 retorna um valor no array
echo end($idades); --> 42 vai para o final do array

Um ótimo exemplo podemos usar no while

reset($idades);//seta o ponteiro para o primeiro valor do array
while($v_idade = current($idades)){//neste caso ele vai executar o while enquanto tiver valores no array
	echo $v_idade . ", ";
	next($idades);
}




--------------------------Arrays associativos
Em arrays associativos atribuimos nomes aos índices ao invés de usar apenas índices ex:
$assoc = array("primeiro_nome" => "João", "segundo_nome" => "Silva");
echo $assoc["primeiro_nome"];
O resultado seria: João
echo $assoc["primeiro_nome"] . "" . $assoc["segundo_nome"];
O resultado seria: João Silva
Para alterar o valor de um array associativo fazemos o seguinte:
$assoc["primeiro_nome"] = "Pedro";


-------------------------Funções para arrays
Imaginemos o seguinte array:
$numeros = array(8,23,15,42,16,4);

Para saber o valor máximo dentro de um array: max
echo max($numeros);
O resultado seria: 42

Para saber o valor mínimo dentro de um array: min
echo min($numeros);
O resultado seria: 4

Para saber o tamanho do array: count
echo count($numeros);
O resultado seria: 6

se quiser fazer um while para mostrar os valores de um array
$i = 0;
$n = count($numeros);
while ($i<$n)
{
	echo $numeros[$i], "<br>";
	$i++;
}

Para ordenar um array do menor para o mario: sort
sort($numeros);
echo print_r($numeros);
O resultado seria: Array([0] => 4 [1] => 8 [2] => 15 [3] => 16 [4] => 23 [5] => 42)

Para ordenar um array do maior para o menor: rsort
rsort($numeros);
echo print_r($numeros);
O resultado seria: Array([0] => 42 [1] => 23 [2] => 16 [3] => 15 [4] => 8 [5] => 4)

Transformar um array em string: implode
echo $num_string = implode(" * ", $numeros);
O primeiro parâmetro * é o que eu quero no meio dos valores do array.
O resultado seria: 8 * 23 * 15 * 42 * 16 * 4

Transormar uma string/texto em um array: explode
$num_string="8 * 23 * 15 * 42 * 16 * 4";
print_r(explode(" * ", $num_string));
O resultado seria: Array([0] => 8 [1] => 23 [2] => 15 [3] => 42 [4] => 16 [5] => 4)
Observe que agora o * é o que o php procura para quebrar a string, se em um texto quisermos quebrar toda vez 
que tiver um ; teriamos que fazer assim: 
$novoArray = array(); 
$novoArray = explode(" ; ", $string);

Para saber se existe um determinado valor dentro de um array: in_array
echo in_array(15, $numeros);
Se tiver o valor 15 dentro do array ele retornará 1, caso contrario não retornará nenhum valor.

Trabalhando com valores booleanos.
No php $resultado = true; ou $resultado = TRUE; é a mesma coisa, não é case sensitive, o mesmo vale para false.

Para saber se uma variável é do tipo booleano: is_bool
Se tivermos o seguinte código:
$valor=true;
echo is_bool($valor);
O resultado seria: 1 caso contrário seria em branco.

Para realizar testes com valores booleanos:
$numero = 3.2;
if( is_float($numero)){
	echo "Este é um valor float.";
}
O resultado seria: Este é um valor float.
Caso o valor fosse 2 ele não iria apresentar nada na tela.

------------------>NULL E EMPTY
Verificando se o conteúdo da variável é null ou empty: is_null
Imaginando que temos as seguintes variáveis:
$var1 = null;
$var2 = "";
echo is_null($var1); O resultado seria: 1
echo is_null($var2); Não teriamos nada como resultado pois o resultado é falso.
echo is_null($var3); O resultado para variáveis sem atribuição de valores seria um erro de variável não definida: undefined variable.
Logo o correto é sempre quando queremos disponibilizar uma variável sem qualquer valor atribuido, atribuimos o valor null para evitar este tipoi de erro.

Verificar se foi setado, atribuido valor diferente de null ou indefined para uma variável: isset
$var1 = null;
$var2 = "";
echo isset($var1);Não teriamos nada como resultado pois o resultado é falso.
echo isset($var2):O resultado seria: 1
echo isset($var3);Não teriamos nada como resultado pois o resultado é falso.

Verificar se uma variável está vazia: empty
Empty: são os valores: "", null, 0, 0.0, "0", false, array()
$var1 = null;
$var2 = "";
$var3 = "0";
echo empty($var1);O resultado seria: 1
echo empty($var2):O resultado seria: 1
echo empty($var3);O resultado seria: 1

**************************************************************CONVERÇÃO E APRESENTAÇÃO DE TIPO DE VARIÁVEL***********************

Para saber o tipo da variável: gettype
$variavel = 1;
echo gettype($variavel);
O resultado seria: integer

Para alterar o tipo de uma variável: settype
O php faz a converção de variável automaticamente ex: $numero1 = "10"; $numero2 = 15;
Logo temo uma string e um integer;
se fizermos $soma = $numero1 + $numero2 o php irá converter automaticamente irá mostrar como resultado 25;
Agora se quisermos forçar a converção para um tipo específico fazemos o seguinte:
settype($numero1, "integer");
Ou ainda na atribuição do valor como segue:
$texto = (string) $numero;
Agora temos o valor que está na variável número em forma de string na variável texto.

Para declarar uma constante, deve se usar letra maiúscula.
define("TAMANHO_MAXIMO, 980");
echo TAMANHO_MAXIMO;

********************************************************IF*********************************************************************
if($a > $b)
{
	echo "a é maior que b";
}	
elseif ($a < $b)
{
	echo "a é menor que b";
}
else
{
	echo "a é igual a b";
}

elseif pode ser colocado quantos forem necessários, no entanto else tem que ser a última condição

junto com html pode ser usado assim
<?php if ($variable): ?>
 	<p>html code</p>
 <?php else: ?>
	<p>more html code</p>
<?php endif; ?>


obs.: == ele avalia se os valores são iguais, se uma variável for = "123" string e outra for 123 número ele vai avaliar como igual, agora
se você quiser avaliar se são completamente iguais valor e tipo você deve usar ===

igual ==
identico ===
não igual !=
não identico !==
and &&
or ||

****************************************************switch**********************************************************************

$a = 3;

switch ($a)
{
	case = 0:
		echo "a é igual a 0<br />";
		break;
	case = 1:
		echo "a é igual a 1<br />";
		break;
	case = 2:
		echo "a é igual a 2<br />";
		break;
	case = 3:
		echo "a é igual a 3<br />";
		break;
	default:
		echo "a não é 0, 1, 2 ou 3<br />";
		break; 
}

uma maneira mais visual ficaria assim
switch ($a)
{
	case = 0: echo "a é igual a 0<br />"; break;
	case = 1: echo "a é igual a 1<br />"; break;
	case = 2: echo "a é igual a 2<br />"; break;
	case = 3: echo "a é igual a 3<br />"; break;
	default: echo "a não é 0, 1, 2 ou 3<br />";	break; 
}

Se quiser mesma ação para casos diferentes

$tipo_usuario = 'clie nte';

switch ($tipo_usuario)
{
	case 'estudante':
		echo "Bem vindo!";
		break;
	case 'imprensa';
	case 'cliente';
		echo "Olá!";
		break;
}

********************************************************FOR*****************************************************************************************

for ($a=0;$a<=0;$a++){
	echo "Número, {$a}";
}

foreach: SEMPRE que for trabalhar com ARRAY usar o foreach, varre o vetor ex:

$idades = array(4,8,15,16,23,42);

foreach($idades as $v_idade)
{
	echo "Idade: {$v_idade}<br />";
}

para arrays associativos:

$pessoa = array(
				"primeiro_nome" => "Kevin",
				"sobrenome" => "Skoglund",
				"endereco" => "Rua Joao Carvalho 234",
				"cidade" => "Piçarras",
				"estado" => "SC",
				"cep" => "88380000"
				);
foreach($pessoa as $atributo ==> $dado){
	$melhor_atributo = ucwords(str_replace("-", " ", $atributo));
	echo "{$melhor_atributo}: {$dado}<br />";
}

$melhor_atributo = ucwords(str_replace("-", " ", $atributo));
$melhor_atributo vai receber os valores em uppercase ucwords e vai substituir o - por " " str_replace("-", " ", $atributo)
mostrando o seguinte como no primeiro atributo PRIMEIRO NOME
no fina essa linha mostra o seguinte 
echo "{$melhor_atributo}: {$dado}<br />";
		PRIMEIRO NOME: Kevin

array dentro de array com o foreach
$people = array(
	'Jason' => array(
		'gender' => 'male',
		'hair' => 'brown'
	),
	'Clary' => array(
		'gender' => 'famale',
		'hair' => 'blonde'
	)
);

foreach($people as $name => $person){
	foreach($person as $key => $value){
		echo "$name's $key is $value. <br />";
	}
}


****************************************************CONTINUE****************************************************************************


for($count=0; $count <= 10; $count++)
{
	if($count == 5)
	{
		continue;
	}
echo $count . ", ";
}
o resultado disso é que ele vai pular o 5 ex: quando $count for = a 5 ele não vai fazer nada e vai continuar o loop for

for($count=0; $count <= 10; $count++)
{
	if($count % 2 == 0){continue;}
echo $count . ", ";
}
neste exemplo ele vai imprimir apenas os números imares

for($i=0;$i<=5; $i++)
{
	if($i % 2 == 0){ continue(1); }// significa que vai retornar 1 loop, neste caso para o primeiro for. Da para fazer a mesma coisa com o break
	for ($k=0; $k<=5; $k++)
	{
		if ($k == 3) { continue(2); }// significa que vai retornar 2 loops, neste caso vai continuar a partir do primeiro for
		echo $i . "-" . $k . "<br />";
	}
}

************************************************FUNÇÕES*************************************************************************************
function bemvindo($texto){
	echo "Se bem vindo {$texto}!<br />"
}
para chamar a função
bemvindo("pessoal que gosta de PHP.");
o resultado seria:
Seja bem vindo pessoal que gosta de PHP

Para retornar um valor da função é muito simples ex:
function soma($num1, $num2){
	$soma = $num1 + $num2;
	return $soma;
}
na chamada da função:
$resultado = soma(15, 15);
echo "O resultado da soma é: {$resultado}";

Retornar mais de um valor em uma função
function calculo($val1, $val2){
	$soma = $val1 + $val2;
	$subtracao = $val1 - $val2;
	return array($soma, $subtracao);
}
list($resul_soma, $resul_subtracao) = calculo(20,7);
echo "Soma: " . $resul_soma . "<br />";
echo "Subtração " . $resul_subtracao . "<br />";

você pode definir valores default para uma função ex:
function paint($room="office", $color="red"){
	return "The color of the {$room} is {$color}.<br />";	
}

echo paint();
o resultado seria:
The color of the office is red

o resultado seria:
echo paint("bedroom", "blue");
The color of the bedroom is blue


****************************************************DEBUGING**********************************************************************

echo $variavel; mostra o valor de uma variável

print_r($array); mostra um array que pode ser lido
para visualizar melhor coloque entre 
<pre><?php print_r($array)?></pre>

gettype($variave); mostra o tipo da variável

var_dump($variavel); mostra o tipo da variável e valor

get_defined_vars(); mostra um array com as variáveis definidas
exemplo:
<pre>
	<?php print_r(get_defined_vars())?>
</pre>

debug_backtrace(); mostra os valores passo a passo antes de um evento muito usado para ver dados de uma função
exemplo:
<pre>
<?php var_dump(debug_backtrace()); ?>
</pre>
exemplo com função:
<?php
function say_hello_to($word){
	echo "Hello {$word}!<br />"
	var_dump(debug_backtrace());
}

say_hello_to('Everyone'); 

?>

Ver os valores passados pelo GET
<pre>
<?php
	print_r($_GET);
?>
</pre>

caso queira previnir que o php mostre um erro basta colocar um @ na frente do código ex:
<?php
	@include_once 'fake_file';
	se o arquivo fake_file não existir ele não vai apresentar o erro
?>

*************************************************TRABALHANDO COM URLs***************************************

urlencode: 
Como lidar com caractéres especiais no metodo GET
Exemplo:
Vamos diser que você quer passar o parametro Johnson & Johnson pelo GET. Se você apenas colocar link?valor=Johnson & Johnson 
ele vai passar apenas Johnson pois o & quebra a informação
Para resolver isso fazemos como no exemplo
<?php $empresa = "Johnson & Johnson";
	  $id=2;
?>

<a href="pagina.php?id=<?php echo $id?>&empresa=<?php echo urlencode($empresa);?>"

para resolver isso com códigos HTML:
Exemplo: você quer que apareça em sua página <Enter>
se simplesmente fizer como está acima ele vai entrpretar <Enter> como uma tag e vai mostrar apenas Enter.
para resolver isso podemos usar duas funções no PHP.

<?php 
$texto = "<Enter>";
echo htmlspecialchars($texto);
?>

ou ainda

<?php 
$texto = ""$"-é";
echo htmlentities($texto);
?>


Montando uma url em tempo de execução
<br />
<?php
	$url_page = "php/created/page/url.php";
	$parametro1 = "This is a string with <>"; 
	$parametro2 = "&#?*$[]+ are bad characters";
	$linktext = "<Click>  & learn more";

	$url = "http://localhost/";
	$url .= rawurlencode($url_page);
	$url .= "?" . "param1=" . urlencode($param1);
	$url .= "&" . "param2=" . urlencode($param2);
?>

<a href="<?php echo htmlspecialchars($url); ?>">
	<?php echo htmlspecialchars($linktext); ?>
</a>

Para redirecionar para outra página
<?php redirect_to("pagina.html"); ?>


Uma outra maneira de criar um menu usando o switch
<ul id="menu">
<li> <a href="test.php">Home</a> </li>
<li> <a href="test.php?page=about">About Us</a> </li>
<li> <a href="test.php?page=contact">Contact Us</a> </li>
</ul>

<?php
if(isset($_GET['page']))
{
	$page = htmlentities($_GET['page']);
} 
else
{
	$page = NULL;
}

switch($page) 
{
	case 'about':
		echo "<h1> About Us </h1>
		<p> We are rockin' web developers! </p>";
		<p> O código pode ser inserido direto no case ou redirecionar para outra página.
	break;
	
	case 'contact':
		redirect_to("contact.php");
	break;
	
	default:
		redirect_to("default.php");
	break;
}
?>

***************************************************************VALIDAÇÃO*******************************************
<?php

É bom fazer a verificação se está passando valores ou carregando a página pela primeira vez
if($_SERVER['REQUEST_METHOD'] == 'POST')
{
	// Displays the submitted information
	echo "Thanks for registering! <br />",
	"Username: ", htmlentities($_POST['username']), "<br />",
	"Email: ", htmlentities($_POST['email']), "<br />";
}
else
{
	// If the form was not submitted, displays the form
	?>
	<form action="test.php" method="post">
	<label for="username">Username:</label>
	<input type="text" name="username" />
	<label for="email">Email:</label>
	<input type="text" name="email" />
	<input type="submit" value="Register!" />
	</form>
<?php } // End else statement ?>
*************
**************************
*******************************TESTAR ISSO AQUI ACHO QUE DA CERTO PARA FAZER A RECUPERAÇÃO DOS VALORES NO POST TODOS DE UMA SÓ VEZ
**************************
*************
Outro exemplo igual acima 
<?php
// Checks if the form was submitted
if($_SERVER['REQUEST_METHOD'] == 'POST') {
// Output the contents of $_REQUEST
foreach($_REQUEST as $key => $val) {
echo $key, " : ", $val, "<br />";
}
} else {
// If the form was not submitted, displays the form HTML
?>
<form action="test.php?submit=true" method="post">
<label for="username">Username:</label>
<input type="text" name="username" />
<label for="email">Email:</label>
<input type="text" name="email" />
<input type="submit" name="submit" value="Register!" />
</form>
<?php } // End else statement ?>





	// * presente
	//cuidado empty="", 0, "0", null, false, array()
	$valor = trim("    ");//está definido como em branco na primeira condição ele passa, mas não passa na segunda pois é vazio.
		 //O trim  tira os espaços em branco, caso contrário o php vai entender o espaço como um valor e não como empty
	if(!isset($valor) || (empty($valor) && !is_numeric($valor))){//!is_numeric($valor) não seja numérico
		echo "Validação Falhou.<br />";
	}
	
	// * tamanho do texto
	// minimo
	$valor = "";
	$min = 3;
	//strlen retorna o tamanho da string no caso abaixo vai trazer o comprimento da variável valor
	if(strlen($valor) < $min){
		echo "A string deve conter no mínimo {$min} caracteres.<br />";
	}

	// maximo	
	$max = 6;
	if(strlen($valor) > $max){
		echo "A string não deve conter mais que {$max} caracteres.<br />";
	}

	// * tipo
	$valor = 6;
	if(!is_string($valor)){
		echo "Valor informado não é do tipo texto.<br />";
	}

	// * Verificar se um valor está contido em um conjunto de valores
	$valor = "0";
	$conjunto = array("1","2","3","4");
	if(!in_array($valor, $conjunto)){
		echo "O valor informado não está no intervalo 1 - 4.<br />";
	}
	
	// * uniqueness
	//precisa de banco de dados vai ser visto depois nos vídeos

	// * formato
	//Verificar se um texto possui uma palavra ou caractere
	// usa a função preg_match($palavra, $texto)
	$email = "phpemuitobom@php.com.br";
	if(!preg_match("/@/", $email)){
		echo "Email inválido!";
	}else{
		echo "Email válido!";
	}

	//outra forma pode ser usando strpos
	if (strpos($email, "@") === false){
		echo "Email inválido.<br />";
	}

	?>
*********************************************************************************************************************

**********************************TRABALHANDO COM COOKIES***********************************************************
Para definir uma cookie usamos a função setcookie como no exemplo:
$name = "teste";
$valor = 45;
$expira = time() + (60*60*24*7); - adiciona segundos
		  time () pega o dia e hora atual logo 60 segundos * 60 minutos = 1 hora * 24 = 1 dia * 7 = 1 semana
setcookie($nome, $valor, $expira);


configuração php.ini em etc/php5/apache2 php.ini
display_errors = On
error_reporting = E_ALL

Podemos fazer esta configuração no próprio código assim:
ini_set('display_errors', 'On');
error_reporting(E_ALL);

E_STRICT adicionado no PHP 5
mas não no E_ALL até PHP 5.4
error_reporting(E_ALL | E_STRICT); //todos os erros inclusive os mais severos, tipo força qualquer erro pelo que entendi da versão 5.4 para frente apenas o E_ALL é suficiente

Use ~ para omitir
error_reporting(E_ALL & ~E_DEPRECATED); //todos os erros menos os depreciados

retorna um número que é referente ao level corrente
error_reporting();
para ver o level de erro que você está utilizando acesse o site: http://php.net/manual/en/errorfunc.constants.php e com base no número retornado pela função veja o level de erro.


por questões de segurança é bom usar o htmlspecialchars para escrever valores das variáveis
<?php
$name = $_GET['name'];
echo 'Welcome to our website, ' .
htmlspecialchars($name, ENT_QUOTES, 'UTF-8') . '!';
?>

__DIR__ retorna o caminho para o arquivo corrente
